name: Tests

on:
  push:
    branches: ["main", "staging"]
  pull_request:
    branches: ["main", "staging"]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      NODE_OPTIONS: --experimental-vm-modules
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        id: tests
        run: |
          HAS_TEST=$(node -e "try{const p=require('./package.json');console.log(p.scripts && p.scripts.test ? 'yes':'no')}catch(e){console.log('no')}")
          if [ "$HAS_TEST" = "yes" ]; then
            npm test -- --coverage
          else
            echo "::notice::No test script found in package.json. Skipping tests."
            echo "no-tests" > .no-tests
          fi
        continue-on-error: true

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.run_id }}
          path: |
            coverage/**
          if-no-files-found: ignore
          retention-days: 30

      - name: Annotate test failures
        if: steps.tests.outcome == 'failure'
        run: |
          echo "::error::Tests failed. Check the job logs for details."
          echo "## Test failures" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "One or more tests failed. Please review the logs above. If the project is missing a test setup, add a test runner and scripts in package.json." >> $GITHUB_STEP_SUMMARY

      - name: Summary
        if: always()
        run: |
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          if [ -f .no-tests ]; then
            echo "ℹ️ No tests found. Add a test runner and a \`test\` script to package.json to enable this workflow." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.tests.outcome }}" = "success" ]; then
            echo "✅ Tests passed." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Tests failed." >> $GITHUB_STEP_SUMMARY
          fi
          if [ -d coverage ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Coverage artifacts have been uploaded as 'coverage-${{ github.run_id }}'." >> $GITHUB_STEP_SUMMARY
          fi
